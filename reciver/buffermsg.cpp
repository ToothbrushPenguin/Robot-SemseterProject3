#include "buffermsg.h"

BufferMsg::BufferMsg()
{
}

vector<char> BufferMsg::SignalRecord()
{    
    bool toggle = 0;
    vector<char> msg = {};

    if (SignalRecoder::isAvailable())
    {
        //auto start = chrono::high_resolution_clock::now();

        while(true){
        recorder.start(samplerate);
        this_thread::sleep_for(chrono::milliseconds(1000));
        recorder.stop();
        fsout = FourierSplit(recorder.getSampels());
        //cout << fsout[0] << " " << fsout[1] << endl;
        }


        //auto stop = chrono::high_resolution_clock::now();
        //auto duration = chrono::duration_cast<chrono::milliseconds>(stop - start);
        //cout << duration.count() << endl;
    }

    fsout = {697,1209};

    if(fsout.size()==2){

        if(result(fsout) == '*'||toggle == 1){
            toggle = 1;
            msg.push_back(result(fsout));

        }
        if(result(fsout) == '#'){//stop bit
            return msg;
        }
    }
    return {'0'};
}


vector<int> BufferMsg::FourierSplit(vector<int> samples)
{
    //string s;
    //for(unsigned int u = 0; u < samples.size(); u++){
    //    s += to_string(samples[u])+", ";
    //}
    //cout << "start :" << s <<": slut" << endl;

    //samples = {-2, -166, -202, -108, 2, 14, -73, -172, -172, -27, 186, 306, 229, 9, -195, -247, -131, 32, 110, 62, -50, -100, -26, 116, 209, 152, -40, -236, -287, -156, 50, 194, 193, 73, -45, -57, 31, 110, 68, -90, -241, -261, -112, 119, 283, 262, 79, -121, -208, -145, -23, 32, -23, -133, -180, -81, 112, 262, 251, 68, -150, -240, -152, 32, 170, 171, 60, -45, -35, 88, 204, 175, -12, -228, -317, -211, 14, 198, 229, 117, -35, -107, -53, 52, 87, -2, -153, -233, -153, 46, 225, 245, 98, -108, -235, -209, -87, 21, 12, -98, -181, -133, 40, 210, 239, 93, -122, -262, -231, -52, 134, 196, 123, 5, -48, 14, 129, 168, 52, -153, -292, -242, -31, 177, 240, 143, -26, -142, -121, -6, 69, 22, -118, -225, -183, 9, 236, 338, 234, 3, -188, -215, -93, 63, 118, 36, -83, -97, 26, 182, 236, 119, -100, -267, -268, -99, 114, 223, 177, 46, -35, 0, 108, 177, 102, -101, -280, -284, -100, 144, 287, 241, 54, -106, -133, -40, 65, 69, -29, -132, -131, 6, 198, 302, 234, 28, -180, -244, -146, 22, 131, 106, 8, -41, 28, 173, 259, 192, -14, -221, -284, -164, 50, 196, 185, 61, -51, -52, 43, 135, 111, -35, -197, -235, -97, 139, 309, 297, 132, -58, -149, -98, 20, 86, 42, -66, -116, -26, 166, 322, 309, 119, -110, -225, -168, -9, 109, 104, 10, -74, -58, 60, 171, 152, -9, -215, -313, -221, 7, 206, 247, 141, 1, -53, 0, 91, 116, 25, -134, -238, -185, 15, 219, 271, 142, -69, -198, -158, -17, 83, 57, -55, -132, -78, 94, 265, 301, 158, -79, -249, -239, -72, 107, 167, 96, -25, -64, 11, 120, 150, 31, -173, -316, -285, -85, 149, 254, 181, 20, -92, -76, 30, 107, 72, -55, -155, -115, 61, 261, 342, 240, 28, -160, -206, -103, 30, 86, 23, -84, -102, 18, 188, 257, 151, -67, -252, -275, -127, 74, 184, 149, 18, -68, -19, 97, 155, 74, -112, -272, -284, -129, 99, 251, 229, 70, -94, -127, -20, 102, 115, 10, -108, -123, 11, 211, 333, 275, 66, -152, -234, -138, 25, 116, 72, -44, -104, -34, 119, 221, 169, -29, -237, -305, -193, 16, 173, 177, 58, -63, -73, 34, 145, 137, -5, -173, -234, -126, 83, 254, 265, 110, -78, -162, -107, 7, 61, 2, -123, -190, -109, 86, 259, 276, 115, -115, -245, -198, -42, 90, 95, -16, -124, -113, 10, 128, 124, -35, -247, -349, -264, -52, 150, 212, 124, -4, -64, -8, 93, 108, -4, -178, -262, -168, 38, 222, 255, 120, -80, -212, -205, -98, 4, 11, -64, -121, -69, 95, 261, 282, 117, -132, -309, -314, -156, 37, 125, 72, -34, -76, -8, 117, 168, 60, -143, -297, -282, -88, 143, 238, 155, -10, -121, -99, 17, 93, 39, -113, -234, -210, -35, 178, 267, 160, -57, -231, -253, -130, 12, 61, 1, -89, -101, 12, 181, 258, 161, -59, -258, -291, -146, 62, 184, 149, 27, -51, -8, 108, 166, 89, -95, -249, -256, -99, 133, 287, 267, 100, -79, -142, -75, 33, 55, -53, -196, -232, -101, 120, 272, 246, 50, -161, -238, -154, -3, 87, 53, -51, -111, -47, 106, 224, 193, 17, -186, -275, -168, 48, 218, 238, 128, 12, -15, 57, 143, 126, -20, -198, -265, -148, 80, 263, 274, 116, -81, -175, -121, -19, 18, -39, -152, -207, -107, 100, 275, 293, 127, -116, -268, -240, -89, 41, 58, -19, -93, -64, 67, 198, 216, 75, -139, -270, -216, -13, 186, 233, 107, -57, -114, -42, 75, 125, 37, -131, -243, -192, 4, 213, 294, 184, -30, -186, -188, -70, 40, 44, -52, -141, -116, 32, 194, 236, 113, -107, -268, -259, -110, 62, 131, 74, -15, -44, 27, 150, 199, 90, -122, -281, -271, -92, 134, 244, 177, 16, -95, -75, 36, 111, 58, -97, -235, -223, -47, 174, 285, 212, 6, -181, -224, -120, 21, 62, -14, -117, -140, -23, 152, 251, 181, -37, -242, -283, -147, 53, 169, 140, 29, -47, -4, 114, 185, 131, -48, -236, -272, -121, 110, 270, 257, 106, -51, -104, -38, 58, 71, -30, -165, -212, -97, 119, 277, 255, 61, -163, -258, -187, -47, 39, 6, -83, -115, -31, 121, 216, 165, -20, -232, -329, -230, -3, 189, 227, 119, -8, -39, 37, 136, 127, -19, -199, -281, -185, 29, 222, 269, 141, -50, -151, -104, 13, 70, -2, -153, -241, -166, 43, 230, 248, 91, -125, -253, -215, -60, 82, 105, 14, -80, -66, 64, 200, 211, 63, -158, -302, -259, -65, 133, 210, 131, -17, -107, -75, 38, 95, 18, -144, -252, -193, 9, 222, 299, 199, -2, -157, -157, -35, 71, 48, -81, -187, -159, 2, 182, 246, 140, -70, -232, -228, -79, 87, 153};

    vector<double> chanceoffrek = {};
    vector<int> biggest = {};
    complex<double> number = 0;
    vector<complex<double>> comp = {};
    vector<double> frequencys = {697,770,852,941,1209,1336,1477,1633};




    for(unsigned int u = 0; u < frequencys.size(); u++){
        number = 0;
        for(unsigned int n = 0; n < samples.size()-1; n++){
            number += (double)samples[n]*exp((-2i*frequencys[u]*(double)n*M_PI)/(double)samplerate);
        }
        comp.push_back(number*2./(double)samples.size());
    }

    for(unsigned int u = 0; u < frequencys.size(); u++){
        chanceoffrek.push_back((sqrt(pow(real(comp[u]),2)+pow(imag(comp[u]),2))));
    }

    for(unsigned int u = 0; u < frequencys.size(); u++){
        cout << frequencys[u] << " " << chanceoffrek[u] << endl;
    }


    biggest={697,1209};
    return biggest;

}

char BufferMsg::result(vector<int> frequency)
{

    vector<int> n;
    switch(frequency[0])
    {
    case 697:n={'1','2','3','A'} ; break;
    case 770:n={'4','5','6','B'} ; break;
    case 852:n={'7','8','9','C'} ; break;
    case 941:n={'*','0','#','D'} ; break;
    }

    int m;
    switch(frequency[1])
    {
    case 1209:m=0 ; break;
    case 1336:m=1 ; break;
    case 1477:m=2 ; break;
    case 1633:m=3 ; break;
    }

    return n[m];
}




